// Import the helper function to access Firebase Realtime Database
import { getDatabase } from './firebase';

// Define the structure of a task in the Discord bot queue
export interface QueueTask {
  id: string;                    // Unique identifier for each task (generated by Firebase)
  userCommand: string;           // The command that the user issued to the bot
  channelId: string;             // Discord channel ID where the command was issued
  guildId: string;               // Discord server (guild) ID
  botToken: string;              // Token of the bot processing the command
  interactionToken: string;      // Discord interaction token for responding
  applicationId: string;         // Discord bot's application ID
  status: 'pending' | 'processing' | 'completed' | 'failed'; // Current state of the task
  createdAt: number;             // Timestamp (ms) when the task was created
  processedAt?: number;          // Timestamp (ms) when the task started/finished processing
  error?: string;                // Error message if the task failed
}

/**
 * Adds a new task to the Firebase Realtime Database queue.
 * @param task - The task data (excluding id, status, and createdAt which are auto-assigned)
 * @returns The unique task ID generated by Firebase.
 */
export async function addTaskToQueue(
  task: Omit<QueueTask, 'id' | 'status' | 'createdAt'>
): Promise<string> {
  const db = getDatabase();                   // Get the Firebase database instance
  const taskRef = db.ref('discord/queue').push(); // Create a new push reference in the queue
  const taskId = taskRef.key!;                // Get the auto-generated Firebase key as task ID
  
  // Construct the complete task object
  const queueTask: QueueTask = {
    ...task,
    id: taskId,
    status: 'pending',                        // Newly added tasks start as "pending"
    createdAt: Date.now(),                    // Record creation time
  };
  
  // Save the task to Firebase
  await taskRef.set(queueTask);
  console.log('Task added to queue:', taskId);
  return taskId;                              // Return the generated task ID
}

/**
 * Fetches the next pending task from the queue and marks it as "processing".
 * @returns The next pending task, or null if none are pending.
 */
export async function getNextPendingTask(): Promise<QueueTask | null> {
  const db = getDatabase();

  // Query the queue for the oldest task with status 'pending'
  const snapshot = await db.ref('discord/queue')
    .orderByChild('status')
    .equalTo('pending')
    .limitToFirst(1)
    .once('value');
  
  // If there are no pending tasks, return null
  if (!snapshot.exists()) {
    return null;
  }
  
  // Extract the first (and only) pending task
  const tasks = snapshot.val();
  const taskId = Object.keys(tasks)[0];
  const task = tasks[taskId];
  
  // Mark the task as "processing" and set a processed timestamp
  await db.ref(`discord/queue/${taskId}/status`).set('processing');
  await db.ref(`discord/queue/${taskId}/processedAt`).set(Date.now());
  
  return task;
}

/**
 * Updates a specific task's status to "completed" or "failed".
 * Optionally logs an error message if the task failed.
 * @param taskId - The Firebase ID of the task
 * @param status - Either 'completed' or 'failed'
 * @param error - Optional error message if failed
 */
export async function updateTaskStatus(
  taskId: string, 
  status: 'completed' | 'failed', 
  error?: string
): Promise<void> {
  const db = getDatabase();

  // Prepare the update payload
  const updates: any = {
    status,
    processedAt: Date.now(), // Record when the task was finalized
  };
  
  // Include error message if provided
  if (error) {
    updates.error = error;
  }
  
  // Apply updates to the task node
  await db.ref(`discord/queue/${taskId}`).update(updates);
  console.log(`Task ${taskId} marked as ${status}`);
}

/**
 * Deletes old tasks from the queue that were created before a certain time.
 * Default retention is 24 hours (1 day).
 * @param olderThanMs - The time threshold in milliseconds for old tasks
 */
export async function cleanupOldTasks(
  olderThanMs: number = 24 * 60 * 60 * 1000  // Default: 1 day
): Promise<void> {
  const db = getDatabase();
  const cutoffTime = Date.now() - olderThanMs;  // Calculate the cutoff timestamp
  
  // Find all tasks created before the cutoff time
  const snapshot = await db.ref('discord/queue')
    .orderByChild('createdAt')
    .endAt(cutoffTime)
    .once('value');
  
  // If there are any old tasks, remove them in parallel
  if (snapshot.exists()) {
    const tasks = snapshot.val();
    const deletePromises = Object.keys(tasks).map(taskId => 
      db.ref(`discord/queue/${taskId}`).remove()
    );
    await Promise.all(deletePromises);
    console.log(`Cleaned up ${deletePromises.length} old tasks`);
  }
}
